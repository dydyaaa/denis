import telebot
import math
import buttons as btn
import cfg
import os


hello_photo = os.getcwd() + '/image/123.jpeg'
rub_rate = cfg.get_rub_rate()
bot = telebot.TeleBot(cfg.TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    #bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=btn.strbtn)
    with open(hello_photo, 'rb') as hp:
        bot.send_photo(message.chat.id, hp, caption=f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=btn.strbtn)
    
@bot.message_handler(func=lambda message: message.text == "üí≤–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
def handle_calculate_cost(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=btn.cartbtn)

@bot.message_handler(func=lambda message: message.text in ["üëü–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "üß•–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "üß¶–ù–æ—Å–∫–∏", "üëñ–¢–æ–ª—Å—Ç–æ–≤–∫–∏/–®—Ç–∞–Ω—ã", "üëï–§—É—Ç–±–æ–ª–∫–∏/–®–æ—Ä—Ç—ã", "üß£–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"])
def handle_product_category(message):
    global current_value 
    current_value = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Æ–∞–Ω—è—Ö:")
    bot.register_next_step_handler(message, process_number)

def process_number(message):
    try:
        number = int(message.text)
        result = perform_operation(number)
        bot.send_message(message.chat.id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {result}")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        handle_product_category(message)

# –§—É–Ω–∫—Ü–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ —Ä–∞—Å—Å—á–µ—Ç–∞ —Ü–µ–Ω. –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def perform_operation(number):
    if current_value == "üëü–ö—Ä–æ—Å—Å–æ–≤–∫–∏":
        return math.ceil(number * cfg.get_rub_rate())
    elif current_value == "üß¶–ù–æ—Å–∫–∏":
        return math.ceil(number * (cfg.get_rub_rate() + 1) + 1000)
    else:
        return math.ceil(number)

@bot.message_handler(commands=['setrub'])
def rub(message):
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –Æ–∞–Ω—è:')
    bot.register_next_step_handler(message, rub)

def rub(message):
    rub_rate = float(message.text)
    bot.send_message(message.chat.id, f'–∫—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω {rub_rate}')

@bot.message_handler(func=lambda message: True)
def menu(message):
    if message.text == "üíµ–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å":
        mes = f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –Æ–∞–Ω—è: {rub_rate}'
        bot.send_message(message.chat.id, mes)
    elif message.text == "‚ùì–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã":
        bot.send_message(message.chat.id, cfg.faq)
    elif message.text == "üì≤–û—Ç–∑—ã–≤—ã":
        bot.send_message(message.chat.id, f"–ë–∏–º –±–∞–º\n[–í–∞—à —Ç–µ–∫—Å—Ç]({cfg.otzv})", parse_mode="Markdown")
    elif message.text == "üìû–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        bot.send_message(message.chat.id, f"–ë–∏–º –±–∞–º\n[–í–∞—à —Ç–µ–∫—Å—Ç]({cfg.help})", parse_mode="Markdown")
    elif message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        send_welcome(message)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")

if __name__ == "__main__":
    bot.polling()